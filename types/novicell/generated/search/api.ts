/* tslint:disable */
/* eslint-disable */
/**
 * Fl√ºgger B2C Search API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


 import { Configuration } from './configuration';
 import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
 // Some imports not used depending on template conditions
 // @ts-ignore
 import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
 // @ts-ignore
 import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';
 
 /**
  * 
  * @export
  * @interface Pagination
  */
 export interface Pagination {
     /**
      * 
      * @type {number}
      * @memberof Pagination
      */
     page?: number;
     /**
      * 
      * @type {number}
      * @memberof Pagination
      */
     pageSize?: number | null;
 }
 /**
  * 
  * @export
  * @interface ProblemDetails
  */
 export interface ProblemDetails {
     [key: string]: any | any;
 
     /**
      * 
      * @type {string}
      * @memberof ProblemDetails
      */
     type?: string | null;
     /**
      * 
      * @type {string}
      * @memberof ProblemDetails
      */
     title?: string | null;
     /**
      * 
      * @type {number}
      * @memberof ProblemDetails
      */
     status?: number | null;
     /**
      * 
      * @type {string}
      * @memberof ProblemDetails
      */
     detail?: string | null;
     /**
      * 
      * @type {string}
      * @memberof ProblemDetails
      */
     instance?: string | null;
 }
 /**
  * 
  * @export
  * @interface SearchAllViewModel
  */
 export interface SearchAllViewModel {
     /**
      * 
      * @type {SearchResponseProductListViewModel}
      * @memberof SearchAllViewModel
      */
     products?: SearchResponseProductListViewModel;
 }
 /**
  * 
  * @export
  * @interface SearchBitFilterOption
  */
 export interface SearchBitFilterOption {
     /**
      * 
      * @type {string}
      * @memberof SearchBitFilterOption
      */
     filterKey?: string | null;
     /**
      * 
      * @type {number}
      * @memberof SearchBitFilterOption
      */
     sortOrder?: number;
     /**
      * 
      * @type {SearchFilterType}
      * @memberof SearchBitFilterOption
      */
     filterType?: SearchFilterType;
     /**
      * 
      * @type {boolean}
      * @memberof SearchBitFilterOption
      */
     selected?: boolean | null;
     /**
      * 
      * @type {number}
      * @memberof SearchBitFilterOption
      */
     trueHits?: number;
     /**
      * 
      * @type {number}
      * @memberof SearchBitFilterOption
      */
     falseHits?: number;
 }
 /**
  * 
  * @export
  * @interface SearchColorFilter
  */
 export interface SearchColorFilter {
     /**
      * 
      * @type {string}
      * @memberof SearchColorFilter
      */
     filterKey?: string | null;
     /**
      * 
      * @type {number}
      * @memberof SearchColorFilter
      */
     sortOrder?: number;
     /**
      * 
      * @type {SearchFilterType}
      * @memberof SearchColorFilter
      */
     filterType?: SearchFilterType;
     /**
      * 
      * @type {Array<SearchColorFilterOption>}
      * @memberof SearchColorFilter
      */
     options?: Array<SearchColorFilterOption> | null;
 }
 /**
  * 
  * @export
  * @interface SearchColorFilterOption
  */
 export interface SearchColorFilterOption {
     /**
      * 
      * @type {string}
      * @memberof SearchColorFilterOption
      */
     categoryId?: string | null;
     /**
      * 
      * @type {string}
      * @memberof SearchColorFilterOption
      */
     hexCode?: string | null;
     /**
      * 
      * @type {string}
      * @memberof SearchColorFilterOption
      */
     displayName?: string | null;
     /**
      * 
      * @type {number}
      * @memberof SearchColorFilterOption
      */
     hits?: number;
     /**
      * 
      * @type {boolean}
      * @memberof SearchColorFilterOption
      */
     selected?: boolean;
 }
 /**
  * 
  * @export
  * @interface SearchColorViewModel
  */
 export interface SearchColorViewModel {
     /**
      * 
      * @type {string}
      * @memberof SearchColorViewModel
      */
     name?: string | null;
     /**
      * 
      * @type {string}
      * @memberof SearchColorViewModel
      */
     sequenceNumber?: string | null;
     /**
      * 
      * @type {string}
      * @memberof SearchColorViewModel
      */
     description?: string | null;
     /**
      * 
      * @type {string}
      * @memberof SearchColorViewModel
      */
     colorHex?: string | null;
     /**
      * 
      * @type {string}
      * @memberof SearchColorViewModel
      */
     colorCode?: string | null;
     /**
      * 
      * @type {Array<string>}
      * @memberof SearchColorViewModel
      */
     tintingBases?: Array<string> | null;
     /**
      * 
      * @type {string}
      * @memberof SearchColorViewModel
      */
     seoTitle?: string | null;
     /**
      * 
      * @type {string}
      * @memberof SearchColorViewModel
      */
     seoDescription?: string | null;
     /**
      * 
      * @type {Array<string>}
      * @memberof SearchColorViewModel
      */
     ecomEnabledMarkets?: Array<string> | null;
 }
 /**
  * 
  * @export
  * @interface SearchColorWizardViewModel
  */
 export interface SearchColorWizardViewModel {
     /**
      * 
      * @type {SearchResponseProductListViewModel}
      * @memberof SearchColorWizardViewModel
      */
     products?: SearchResponseProductListViewModel;
 }
 /**
  * 
  * @export
  * @interface SearchFilterCollection
  */
 export interface SearchFilterCollection {
     /**
      * 
      * @type {Array<SearchRedirectFilter>}
      * @memberof SearchFilterCollection
      */
     redirectFilters?: Array<SearchRedirectFilter> | null;
     /**
      * 
      * @type {Array<SearchColorFilter>}
      * @memberof SearchFilterCollection
      */
     colorFilters?: Array<SearchColorFilter> | null;
     /**
      * 
      * @type {Array<SearchSingleFilter>}
      * @memberof SearchFilterCollection
      */
     singleFilters?: Array<SearchSingleFilter> | null;
     /**
      * 
      * @type {Array<SearchMultipleFilter>}
      * @memberof SearchFilterCollection
      */
     multipleFilters?: Array<SearchMultipleFilter> | null;
     /**
      * 
      * @type {Array<SearchBitFilterOption>}
      * @memberof SearchFilterCollection
      */
     bitFilters?: Array<SearchBitFilterOption> | null;
 }
 /**
  * 
  * @export
  * @enum {string}
  */
 
 export enum SearchFilterType {
     Redirect = 'redirect',
     Color = 'color',
     Single = 'single',
     Multiple = 'multiple',
     Bit = 'bit'
 }
 
 /**
  * 
  * @export
  * @interface SearchFiltersResponseProductListViewModel
  */
 export interface SearchFiltersResponseProductListViewModel {
     /**
      * 
      * @type {number}
      * @memberof SearchFiltersResponseProductListViewModel
      */
     total?: number;
     /**
      * 
      * @type {boolean}
      * @memberof SearchFiltersResponseProductListViewModel
      */
     hasNextPage?: boolean;
     /**
      * 
      * @type {Array<SearchProductListViewModel>}
      * @memberof SearchFiltersResponseProductListViewModel
      */
     results?: Array<SearchProductListViewModel> | null;
     /**
      * 
      * @type {SearchFilterCollection}
      * @memberof SearchFiltersResponseProductListViewModel
      */
     filters?: SearchFilterCollection;
 }
 /**
  * 
  * @export
  * @interface SearchImageViewModel
  */
 export interface SearchImageViewModel {
     /**
      * 
      * @type {string}
      * @memberof SearchImageViewModel
      */
     altText?: string | null;
     /**
      * 
      * @type {string}
      * @memberof SearchImageViewModel
      */
     url?: string | null;
 }
 /**
  * 
  * @export
  * @interface SearchMoneyViewModel
  */
 export interface SearchMoneyViewModel {
     /**
      * 
      * @type {number}
      * @memberof SearchMoneyViewModel
      */
     amount?: number | string | null;
     /**
      * 
      * @type {string}
      * @memberof SearchMoneyViewModel
      */
     displayValue?: string | null;
 }
 /**
  * 
  * @export
  * @interface SearchMultipleFilter
  */
 export interface SearchMultipleFilter {
     /**
      * 
      * @type {string}
      * @memberof SearchMultipleFilter
      */
     filterKey?: string | null;
     /**
      * 
      * @type {number}
      * @memberof SearchMultipleFilter
      */
     sortOrder?: number;
     /**
      * 
      * @type {SearchFilterType}
      * @memberof SearchMultipleFilter
      */
     filterType?: SearchFilterType;
     /**
      * 
      * @type {Array<SearchMultipleFilterOption>}
      * @memberof SearchMultipleFilter
      */
     options?: Array<SearchMultipleFilterOption> | null;
 }
 /**
  * 
  * @export
  * @interface SearchMultipleFilterOption
  */
 export interface SearchMultipleFilterOption {
     /**
      * 
      * @type {string}
      * @memberof SearchMultipleFilterOption
      */
     value?: string | null;
     /**
      * 
      * @type {number}
      * @memberof SearchMultipleFilterOption
      */
     hits?: number;
     /**
      * 
      * @type {boolean}
      * @memberof SearchMultipleFilterOption
      */
     selected?: boolean;
 }
 /**
  * 
  * @export
  * @interface SearchPriceTierViewModel
  */
 export interface SearchPriceTierViewModel {
     /**
      * 
      * @type {SearchMoneyViewModel}
      * @memberof SearchPriceTierViewModel
      */
     unitPrice?: SearchMoneyViewModel;
     /**
      * 
      * @type {SearchMoneyViewModel}
      * @memberof SearchPriceTierViewModel
      */
     unitDiscount?: SearchMoneyViewModel;
     /**
      * 
      * @type {boolean}
      * @memberof SearchPriceTierViewModel
      */
     hasDiscount?: boolean | null;
     /**
      * 
      * @type {string}
      * @memberof SearchPriceTierViewModel
      */
     unitDiscountPercentage?: string | null;
     /**
      * 
      * @type {number}
      * @memberof SearchPriceTierViewModel
      */
     minimumQuantity?: number | null;
 }
 /**
  * 
  * @export
  * @interface SearchPriceViewModel
  */
 export interface SearchPriceViewModel {
     /**
      * 
      * @type {SearchMoneyViewModel}
      * @memberof SearchPriceViewModel
      */
     unitPrice?: SearchMoneyViewModel;
     /**
      * 
      * @type {SearchMoneyViewModel}
      * @memberof SearchPriceViewModel
      */
     originalUnitPrice?: SearchMoneyViewModel;
     /**
      * 
      * @type {SearchMoneyViewModel}
      * @memberof SearchPriceViewModel
      */
     unitDiscount?: SearchMoneyViewModel;
     /**
      * 
      * @type {boolean}
      * @memberof SearchPriceViewModel
      */
     hasDiscount?: boolean | null;
     /**
      * 
      * @type {string}
      * @memberof SearchPriceViewModel
      */
     unitDiscountPercentage?: string | null;
     /**
      * 
      * @type {Array<SearchPriceTierViewModel>}
      * @memberof SearchPriceViewModel
      */
     tiers?: Array<SearchPriceTierViewModel> | null;
 }
 /**
  * 
  * @export
  * @interface SearchProductListViewModel
  */
 export interface SearchProductListViewModel {
     /**
      * 
      * @type {string}
      * @memberof SearchProductListViewModel
      */
     variantId?: string | null;
     /**
      * 
      * @type {string}
      * @memberof SearchProductListViewModel
      */
     variantName?: string | null;
     /**
      * 
      * @type {string}
      * @memberof SearchProductListViewModel
      */
     variantDescription?: string | null;
     /**
      * 
      * @type {string}
      * @memberof SearchProductListViewModel
      */
     url?: string | null;
     /**
      * 
      * @type {string}
      * @memberof SearchProductListViewModel
      */
     sku?: string | null;
     /**
      * 
      * @type {boolean}
      * @memberof SearchProductListViewModel
      */
     isSellable?: boolean;
     /**
      * 
      * @type {SearchPriceViewModel}
      * @memberof SearchProductListViewModel
      */
     price?: SearchPriceViewModel;
     /**
      * 
      * @type {SearchImageViewModel}
      * @memberof SearchProductListViewModel
      */
     primaryImage?: SearchImageViewModel;
     /**
      * 
      * @type {number}
      * @memberof SearchProductListViewModel
      */
     size?: number | null;
     /**
      * 
      * @type {string}
      * @memberof SearchProductListViewModel
      */
     sizeUnit?: string | null;
     /**
      * 
      * @type {Array<number>}
      * @memberof SearchProductListViewModel
      */
     categories?: Array<number> | null;
     /**
      * 
      * @type {string}
      * @memberof SearchProductListViewModel
      */
     usp1?: string | null;
     /**
      * 
      * @type {string}
      * @memberof SearchProductListViewModel
      */
     usp2?: string | null;
     /**
      * 
      * @type {string}
      * @memberof SearchProductListViewModel
      */
     usageInformation?: string | null;
     /**
      * 
      * @type {number}
      * @memberof SearchProductListViewModel
      */
     washabilityRating?: number | null;
     /**
      * 
      * @type {number}
      * @memberof SearchProductListViewModel
      */
     glossRating?: number | null;
     /**
      * 
      * @type {number}
      * @memberof SearchProductListViewModel
      */
     dryingTimeHours?: number | null;
     /**
      * 
      * @type {number}
      * @memberof SearchProductListViewModel
      */
     dryingTimeRecoatableHours?: number | null;
     /**
      * 
      * @type {number}
      * @memberof SearchProductListViewModel
      */
     dryingTimeFullyCuredHours?: number | null;
     /**
      * 
      * @type {string}
      * @memberof SearchProductListViewModel
      */
     environmentalInformation?: string | null;
     /**
      * 
      * @type {boolean}
      * @memberof SearchProductListViewModel
      */
     isTintable?: boolean | null;
     /**
      * 
      * @type {string}
      * @memberof SearchProductListViewModel
      */
     tintedColorHex?: string | null;
     /**
      * 
      * @type {Array<string>}
      * @memberof SearchProductListViewModel
      */
     roomFeatures?: Array<string> | null;
     /**
      * 
      * @type {Array<string>}
      * @memberof SearchProductListViewModel
      */
     ecoLabels?: Array<string> | null;
     /**
      * 
      * @type {Array<string>}
      * @memberof SearchProductListViewModel
      */
     substrateFeatures?: Array<string> | null;
     /**
      * 
      * @type {string}
      * @memberof SearchProductListViewModel
      */
     productId?: string | null;
     /**
      * 
      * @type {string}
      * @memberof SearchProductListViewModel
      */
     productName?: string | null;
     /**
      * 
      * @type {string}
      * @memberof SearchProductListViewModel
      */
     productDescription?: string | null;
     /**
      * 
      * @type {string}
      * @memberof SearchProductListViewModel
      */
     productType?: string | null;
     /**
      * 
      * @type {Array<SearchProductVariantViewModel>}
      * @memberof SearchProductListViewModel
      */
     variants?: Array<SearchProductVariantViewModel> | null;
     /**
      * 
      * @type {string}
      * @memberof SearchProductListViewModel
      */
     marketingHeadline?: string | null;
 }
 /**
  * 
  * @export
  * @interface SearchProductVariantViewModel
  */
 export interface SearchProductVariantViewModel {
     /**
      * 
      * @type {string}
      * @memberof SearchProductVariantViewModel
      */
     variantId?: string | null;
     /**
      * 
      * @type {string}
      * @memberof SearchProductVariantViewModel
      */
     variantName?: string | null;
     /**
      * 
      * @type {string}
      * @memberof SearchProductVariantViewModel
      */
     variantDescription?: string | null;
     /**
      * 
      * @type {string}
      * @memberof SearchProductVariantViewModel
      */
     url?: string | null;
     /**
      * 
      * @type {string}
      * @memberof SearchProductVariantViewModel
      */
     sku?: string | null;
     /**
      * 
      * @type {boolean}
      * @memberof SearchProductVariantViewModel
      */
     isSellable?: boolean;
     /**
      * 
      * @type {SearchPriceViewModel}
      * @memberof SearchProductVariantViewModel
      */
     price?: SearchPriceViewModel;
     /**
      * 
      * @type {SearchImageViewModel}
      * @memberof SearchProductVariantViewModel
      */
     primaryImage?: SearchImageViewModel;
     /**
      * 
      * @type {number}
      * @memberof SearchProductVariantViewModel
      */
     size?: number | null;
     /**
      * 
      * @type {string}
      * @memberof SearchProductVariantViewModel
      */
     sizeUnit?: string | null;
     /**
      * 
      * @type {Array<number>}
      * @memberof SearchProductVariantViewModel
      */
     categories?: Array<number> | null;
     /**
      * 
      * @type {string}
      * @memberof SearchProductVariantViewModel
      */
     usp1?: string | null;
     /**
      * 
      * @type {string}
      * @memberof SearchProductVariantViewModel
      */
     usp2?: string | null;
     /**
      * 
      * @type {string}
      * @memberof SearchProductVariantViewModel
      */
     usageInformation?: string | null;
     /**
      * 
      * @type {number}
      * @memberof SearchProductVariantViewModel
      */
     washabilityRating?: number | null;
     /**
      * 
      * @type {number}
      * @memberof SearchProductVariantViewModel
      */
     glossRating?: number | null;
     /**
      * 
      * @type {number}
      * @memberof SearchProductVariantViewModel
      */
     dryingTimeHours?: number | null;
     /**
      * 
      * @type {number}
      * @memberof SearchProductVariantViewModel
      */
     dryingTimeRecoatableHours?: number | null;
     /**
      * 
      * @type {number}
      * @memberof SearchProductVariantViewModel
      */
     dryingTimeFullyCuredHours?: number | null;
     /**
      * 
      * @type {string}
      * @memberof SearchProductVariantViewModel
      */
     environmentalInformation?: string | null;
     /**
      * 
      * @type {boolean}
      * @memberof SearchProductVariantViewModel
      */
     isTintable?: boolean | null;
     /**
      * 
      * @type {string}
      * @memberof SearchProductVariantViewModel
      */
     tintedColorHex?: string | null;
     /**
      * 
      * @type {Array<string>}
      * @memberof SearchProductVariantViewModel
      */
     roomFeatures?: Array<string> | null;
     /**
      * 
      * @type {Array<string>}
      * @memberof SearchProductVariantViewModel
      */
     ecoLabels?: Array<string> | null;
     /**
      * 
      * @type {Array<string>}
      * @memberof SearchProductVariantViewModel
      */
     substrateFeatures?: Array<string> | null;
 }
 /**
  * 
  * @export
  * @interface SearchRedirectFilter
  */
 export interface SearchRedirectFilter {
     /**
      * 
      * @type {string}
      * @memberof SearchRedirectFilter
      */
     filterKey?: string | null;
     /**
      * 
      * @type {number}
      * @memberof SearchRedirectFilter
      */
     sortOrder?: number;
     /**
      * 
      * @type {SearchFilterType}
      * @memberof SearchRedirectFilter
      */
     filterType?: SearchFilterType;
     /**
      * 
      * @type {Array<SearchRedirectFilterOption>}
      * @memberof SearchRedirectFilter
      */
     options?: Array<SearchRedirectFilterOption> | null;
 }
 /**
  * 
  * @export
  * @interface SearchRedirectFilterOption
  */
 export interface SearchRedirectFilterOption {
     /**
      * 
      * @type {string}
      * @memberof SearchRedirectFilterOption
      */
     value?: string | null;
     /**
      * 
      * @type {boolean}
      * @memberof SearchRedirectFilterOption
      */
     selected?: boolean;
     /**
      * 
      * @type {string}
      * @memberof SearchRedirectFilterOption
      */
     redirectUrl?: string | null;
 }
 /**
  * 
  * @export
  * @interface SearchResponseCategoryListViewModel
  */
 export interface SearchResponseCategoryListViewModel {
     /**
      * 
      * @type {number}
      * @memberof SearchResponseCategoryListViewModel
      */
     total?: number;
     /**
      * 
      * @type {boolean}
      * @memberof SearchResponseCategoryListViewModel
      */
     hasNextPage?: boolean;
     /**
      * 
      * @type {Array<object>}
      * @memberof SearchResponseCategoryListViewModel
      */
     results?: Array<object> | null;
 }
 /**
  * 
  * @export
  * @interface SearchResponseColorListViewModel
  */
 export interface SearchResponseColorListViewModel {
     /**
      * 
      * @type {number}
      * @memberof SearchResponseColorListViewModel
      */
     total?: number;
     /**
      * 
      * @type {boolean}
      * @memberof SearchResponseColorListViewModel
      */
     hasNextPage?: boolean;
     /**
      * 
      * @type {Array<SearchColorViewModel>}
      * @memberof SearchResponseColorListViewModel
      */
     results?: Array<SearchColorViewModel> | null;
 }
 /**
  * 
  * @export
  * @interface SearchResponseContentListViewModel
  */
 export interface SearchResponseContentListViewModel {
     /**
      * 
      * @type {number}
      * @memberof SearchResponseContentListViewModel
      */
     total?: number;
     /**
      * 
      * @type {boolean}
      * @memberof SearchResponseContentListViewModel
      */
     hasNextPage?: boolean;
     /**
      * 
      * @type {Array<object>}
      * @memberof SearchResponseContentListViewModel
      */
     results?: Array<object> | null;
 }
 /**
  * 
  * @export
  * @interface SearchResponseProductListViewModel
  */
 export interface SearchResponseProductListViewModel {
     /**
      * 
      * @type {number}
      * @memberof SearchResponseProductListViewModel
      */
     total?: number;
     /**
      * 
      * @type {boolean}
      * @memberof SearchResponseProductListViewModel
      */
     hasNextPage?: boolean;
     /**
      * 
      * @type {Array<SearchProductListViewModel>}
      * @memberof SearchResponseProductListViewModel
      */
     results?: Array<SearchProductListViewModel> | null;
     /**
      * 
      * @type {SearchFilterCollection}
      * @memberof SearchResponseProductListViewModel
      */
     filters?: SearchFilterCollection;
 }
 /**
  * 
  * @export
  * @interface SearchSelectedFilters
  */
 export interface SearchSelectedFilters {
     /**
      * 
      * @type {{ [key: string]: string; }}
      * @memberof SearchSelectedFilters
      */
     singleFilters?: { [key: string]: string; } | null;
     /**
      * 
      * @type {{ [key: string]: boolean; }}
      * @memberof SearchSelectedFilters
      */
     bitFilters?: { [key: string]: boolean; } | null;
     /**
      * 
      * @type {{ [key: string]: Array<string>; }}
      * @memberof SearchSelectedFilters
      */
     multipleFilters?: { [key: string]: Array<string>; } | null;
 }
 /**
  * 
  * @export
  * @interface SearchSingleFilter
  */
 export interface SearchSingleFilter {
     /**
      * 
      * @type {string}
      * @memberof SearchSingleFilter
      */
     filterKey?: string | null;
     /**
      * 
      * @type {number}
      * @memberof SearchSingleFilter
      */
     sortOrder?: number;
     /**
      * 
      * @type {SearchFilterType}
      * @memberof SearchSingleFilter
      */
     filterType?: SearchFilterType;
     /**
      * 
      * @type {Array<SearchSingleFilterOption>}
      * @memberof SearchSingleFilter
      */
     options?: Array<SearchSingleFilterOption> | null;
 }
 /**
  * 
  * @export
  * @interface SearchSingleFilterOption
  */
 export interface SearchSingleFilterOption {
     /**
      * 
      * @type {string}
      * @memberof SearchSingleFilterOption
      */
     value?: string | null;
     /**
      * 
      * @type {number}
      * @memberof SearchSingleFilterOption
      */
     hits?: number;
     /**
      * 
      * @type {boolean}
      * @memberof SearchSingleFilterOption
      */
     selected?: boolean;
 }
 
 /**
  * AllApi - axios parameter creator
  * @export
  */
 export const AllApiAxiosParamCreator = function (configuration?: Configuration) {
     return {
         /**
          * 
          * @param {string} [catalogId] 
          * @param {string} [term] 
          * @param {number} [page] 
          * @param {number} [pageSize] 
          * @param {boolean} [loadPrevious] 
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
         searchAll: async (catalogId?: string, term?: string, page?: number, pageSize?: number, loadPrevious?: boolean, options: any = {}): Promise<RequestArgs> => {
             const localVarPath = `/b2c/all/Search`;
             // use dummy base URL string because the URL constructor only accepts absolute URLs.
             const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
             let baseOptions;
             if (configuration) {
                 baseOptions = configuration.baseOptions;
             }
 
             const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
             const localVarHeaderParameter = {} as any;
             const localVarQueryParameter = {} as any;
 
             if (catalogId !== undefined) {
                 localVarQueryParameter['catalogId'] = catalogId;
             }
 
             if (term !== undefined) {
                 localVarQueryParameter['term'] = term;
             }
 
             if (page !== undefined) {
                 localVarQueryParameter['page'] = page;
             }
 
             if (pageSize !== undefined) {
                 localVarQueryParameter['pageSize'] = pageSize;
             }
 
             if (loadPrevious !== undefined) {
                 localVarQueryParameter['loadPrevious'] = loadPrevious;
             }
 
 
     
             setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
             let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
             localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
 
             return {
                 url: toPathString(localVarUrlObj),
                 options: localVarRequestOptions,
             };
         },
     }
 };
 
 /**
  * AllApi - functional programming interface
  * @export
  */
 export const AllApiFp = function(configuration?: Configuration) {
     const localVarAxiosParamCreator = AllApiAxiosParamCreator(configuration)
     return {
         /**
          * 
          * @param {string} [catalogId] 
          * @param {string} [term] 
          * @param {number} [page] 
          * @param {number} [pageSize] 
          * @param {boolean} [loadPrevious] 
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
         async searchAll(catalogId?: string, term?: string, page?: number, pageSize?: number, loadPrevious?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchAllViewModel>> {
             const localVarAxiosArgs = await localVarAxiosParamCreator.searchAll(catalogId, term, page, pageSize, loadPrevious, options);
             return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
         },
     }
 };
 
 /**
  * AllApi - factory interface
  * @export
  */
 export const AllApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
     const localVarFp = AllApiFp(configuration)
     return {
         /**
          * 
          * @param {string} [catalogId] 
          * @param {string} [term] 
          * @param {number} [page] 
          * @param {number} [pageSize] 
          * @param {boolean} [loadPrevious] 
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
         searchAll(catalogId?: string, term?: string, page?: number, pageSize?: number, loadPrevious?: boolean, options?: any): AxiosPromise<SearchAllViewModel> {
             return localVarFp.searchAll(catalogId, term, page, pageSize, loadPrevious, options).then((request) => request(axios, basePath));
         },
     };
 };
 
 /**
  * AllApi - interface
  * @export
  * @interface AllApi
  */
 export interface AllApiInterface {
     /**
      * 
      * @param {string} [catalogId] 
      * @param {string} [term] 
      * @param {number} [page] 
      * @param {number} [pageSize] 
      * @param {boolean} [loadPrevious] 
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof AllApiInterface
      */
     searchAll(catalogId?: string, term?: string, page?: number, pageSize?: number, loadPrevious?: boolean, options?: any): AxiosPromise<SearchAllViewModel>;
 
 }
 
 /**
  * AllApi - object-oriented interface
  * @export
  * @class AllApi
  * @extends {BaseAPI}
  */
 export class AllApi extends BaseAPI implements AllApiInterface {
     /**
      * 
      * @param {string} [catalogId] 
      * @param {string} [term] 
      * @param {number} [page] 
      * @param {number} [pageSize] 
      * @param {boolean} [loadPrevious] 
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof AllApi
      */
     public searchAll(catalogId?: string, term?: string, page?: number, pageSize?: number, loadPrevious?: boolean, options?: any) {
         return AllApiFp(this.configuration).searchAll(catalogId, term, page, pageSize, loadPrevious, options).then((request) => request(this.axios, this.basePath));
     }
 }
 
 
 /**
  * CategoryApi - axios parameter creator
  * @export
  */
 export const CategoryApiAxiosParamCreator = function (configuration?: Configuration) {
     return {
         /**
          * 
          * @param {string} [term] 
          * @param {number} [page] 
          * @param {number} [pageSize] 
          * @param {boolean} [loadPrevious] 
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
         searchCategories: async (term?: string, page?: number, pageSize?: number, loadPrevious?: boolean, options: any = {}): Promise<RequestArgs> => {
             const localVarPath = `/b2c/categories/Search`;
             // use dummy base URL string because the URL constructor only accepts absolute URLs.
             const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
             let baseOptions;
             if (configuration) {
                 baseOptions = configuration.baseOptions;
             }
 
             const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
             const localVarHeaderParameter = {} as any;
             const localVarQueryParameter = {} as any;
 
             if (term !== undefined) {
                 localVarQueryParameter['term'] = term;
             }
 
             if (page !== undefined) {
                 localVarQueryParameter['page'] = page;
             }
 
             if (pageSize !== undefined) {
                 localVarQueryParameter['pageSize'] = pageSize;
             }
 
             if (loadPrevious !== undefined) {
                 localVarQueryParameter['loadPrevious'] = loadPrevious;
             }
 
 
     
             setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
             let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
             localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
 
             return {
                 url: toPathString(localVarUrlObj),
                 options: localVarRequestOptions,
             };
         },
     }
 };
 
 /**
  * CategoryApi - functional programming interface
  * @export
  */
 export const CategoryApiFp = function(configuration?: Configuration) {
     const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration)
     return {
         /**
          * 
          * @param {string} [term] 
          * @param {number} [page] 
          * @param {number} [pageSize] 
          * @param {boolean} [loadPrevious] 
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
         async searchCategories(term?: string, page?: number, pageSize?: number, loadPrevious?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchResponseCategoryListViewModel>> {
             const localVarAxiosArgs = await localVarAxiosParamCreator.searchCategories(term, page, pageSize, loadPrevious, options);
             return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
         },
     }
 };
 
 /**
  * CategoryApi - factory interface
  * @export
  */
 export const CategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
     const localVarFp = CategoryApiFp(configuration)
     return {
         /**
          * 
          * @param {string} [term] 
          * @param {number} [page] 
          * @param {number} [pageSize] 
          * @param {boolean} [loadPrevious] 
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
         searchCategories(term?: string, page?: number, pageSize?: number, loadPrevious?: boolean, options?: any): AxiosPromise<SearchResponseCategoryListViewModel> {
             return localVarFp.searchCategories(term, page, pageSize, loadPrevious, options).then((request) => request(axios, basePath));
         },
     };
 };
 
 /**
  * CategoryApi - interface
  * @export
  * @interface CategoryApi
  */
 export interface CategoryApiInterface {
     /**
      * 
      * @param {string} [term] 
      * @param {number} [page] 
      * @param {number} [pageSize] 
      * @param {boolean} [loadPrevious] 
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof CategoryApiInterface
      */
     searchCategories(term?: string, page?: number, pageSize?: number, loadPrevious?: boolean, options?: any): AxiosPromise<SearchResponseCategoryListViewModel>;
 
 }
 
 /**
  * CategoryApi - object-oriented interface
  * @export
  * @class CategoryApi
  * @extends {BaseAPI}
  */
 export class CategoryApi extends BaseAPI implements CategoryApiInterface {
     /**
      * 
      * @param {string} [term] 
      * @param {number} [page] 
      * @param {number} [pageSize] 
      * @param {boolean} [loadPrevious] 
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof CategoryApi
      */
     public searchCategories(term?: string, page?: number, pageSize?: number, loadPrevious?: boolean, options?: any) {
         return CategoryApiFp(this.configuration).searchCategories(term, page, pageSize, loadPrevious, options).then((request) => request(this.axios, this.basePath));
     }
 }
 
 
 /**
  * ColorApi - axios parameter creator
  * @export
  */
 export const ColorApiAxiosParamCreator = function (configuration?: Configuration) {
     return {
         /**
          * 
          * @param {number} [page] 
          * @param {number} [pageSize] 
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
         getAllColors: async (page?: number, pageSize?: number, options: any = {}): Promise<RequestArgs> => {
             const localVarPath = `/b2c/color/GetAllColors`;
             // use dummy base URL string because the URL constructor only accepts absolute URLs.
             const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
             let baseOptions;
             if (configuration) {
                 baseOptions = configuration.baseOptions;
             }
 
             const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
             const localVarHeaderParameter = {} as any;
             const localVarQueryParameter = {} as any;
 
             if (page !== undefined) {
                 localVarQueryParameter['page'] = page;
             }
 
             if (pageSize !== undefined) {
                 localVarQueryParameter['pageSize'] = pageSize;
             }
 
 
     
             setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
             let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
             localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
 
             return {
                 url: toPathString(localVarUrlObj),
                 options: localVarRequestOptions,
             };
         },
     }
 };
 
 /**
  * ColorApi - functional programming interface
  * @export
  */
 export const ColorApiFp = function(configuration?: Configuration) {
     const localVarAxiosParamCreator = ColorApiAxiosParamCreator(configuration)
     return {
         /**
          * 
          * @param {number} [page] 
          * @param {number} [pageSize] 
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
         async getAllColors(page?: number, pageSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchResponseColorListViewModel>> {
             const localVarAxiosArgs = await localVarAxiosParamCreator.getAllColors(page, pageSize, options);
             return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
         },
     }
 };
 
 /**
  * ColorApi - factory interface
  * @export
  */
 export const ColorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
     const localVarFp = ColorApiFp(configuration)
     return {
         /**
          * 
          * @param {number} [page] 
          * @param {number} [pageSize] 
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
         getAllColors(page?: number, pageSize?: number, options?: any): AxiosPromise<SearchResponseColorListViewModel> {
             return localVarFp.getAllColors(page, pageSize, options).then((request) => request(axios, basePath));
         },
     };
 };
 
 /**
  * ColorApi - interface
  * @export
  * @interface ColorApi
  */
 export interface ColorApiInterface {
     /**
      * 
      * @param {number} [page] 
      * @param {number} [pageSize] 
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof ColorApiInterface
      */
     getAllColors(page?: number, pageSize?: number, options?: any): AxiosPromise<SearchResponseColorListViewModel>;
 
 }
 
 /**
  * ColorApi - object-oriented interface
  * @export
  * @class ColorApi
  * @extends {BaseAPI}
  */
 export class ColorApi extends BaseAPI implements ColorApiInterface {
     /**
      * 
      * @param {number} [page] 
      * @param {number} [pageSize] 
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof ColorApi
      */
     public getAllColors(page?: number, pageSize?: number, options?: any) {
         return ColorApiFp(this.configuration).getAllColors(page, pageSize, options).then((request) => request(this.axios, this.basePath));
     }
 }
 
 
 /**
  * ContentSearchApi - axios parameter creator
  * @export
  */
 export const ContentSearchApiAxiosParamCreator = function (configuration?: Configuration) {
     return {
         /**
          * 
          * @param {string} pageType 
          * @param {boolean} [loadPrevious] 
          * @param {Pagination} [pagination] 
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
         fetchPaginatedContentByType: async (pageType: string, loadPrevious?: boolean, pagination?: Pagination, options: any = {}): Promise<RequestArgs> => {
             // verify required parameter 'pageType' is not null or undefined
             assertParamExists('fetchPaginatedContentByType', 'pageType', pageType)
             const localVarPath = `/b2c/content/{pageType}`
                 .replace(`{${"pageType"}}`, encodeURIComponent(String(pageType)));
             // use dummy base URL string because the URL constructor only accepts absolute URLs.
             const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
             let baseOptions;
             if (configuration) {
                 baseOptions = configuration.baseOptions;
             }
 
             const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
             const localVarHeaderParameter = {} as any;
             const localVarQueryParameter = {} as any;
 
             if (loadPrevious !== undefined) {
                 localVarQueryParameter['loadPrevious'] = loadPrevious;
             }
 
 
     
             localVarHeaderParameter['Content-Type'] = 'application/json';
 
             setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
             let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
             localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
             localVarRequestOptions.data = serializeDataIfNeeded(pagination, localVarRequestOptions, configuration)
 
             return {
                 url: toPathString(localVarUrlObj),
                 options: localVarRequestOptions,
             };
         },
         /**
          * 
          * @param {string} pageType 
          * @param {string} [term] 
          * @param {number} [page] 
          * @param {number} [pageSize] 
          * @param {boolean} [loadPrevious] 
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
         searchByType: async (pageType: string, term?: string, page?: number, pageSize?: number, loadPrevious?: boolean, options: any = {}): Promise<RequestArgs> => {
             // verify required parameter 'pageType' is not null or undefined
             assertParamExists('searchByType', 'pageType', pageType)
             const localVarPath = `/b2c/content/{pageType}`
                 .replace(`{${"pageType"}}`, encodeURIComponent(String(pageType)));
             // use dummy base URL string because the URL constructor only accepts absolute URLs.
             const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
             let baseOptions;
             if (configuration) {
                 baseOptions = configuration.baseOptions;
             }
 
             const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
             const localVarHeaderParameter = {} as any;
             const localVarQueryParameter = {} as any;
 
             if (term !== undefined) {
                 localVarQueryParameter['term'] = term;
             }
 
             if (page !== undefined) {
                 localVarQueryParameter['page'] = page;
             }
 
             if (pageSize !== undefined) {
                 localVarQueryParameter['pageSize'] = pageSize;
             }
 
             if (loadPrevious !== undefined) {
                 localVarQueryParameter['loadPrevious'] = loadPrevious;
             }
 
 
     
             setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
             let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
             localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
 
             return {
                 url: toPathString(localVarUrlObj),
                 options: localVarRequestOptions,
             };
         },
     }
 };
 
 /**
  * ContentSearchApi - functional programming interface
  * @export
  */
 export const ContentSearchApiFp = function(configuration?: Configuration) {
     const localVarAxiosParamCreator = ContentSearchApiAxiosParamCreator(configuration)
     return {
         /**
          * 
          * @param {string} pageType 
          * @param {boolean} [loadPrevious] 
          * @param {Pagination} [pagination] 
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
         async fetchPaginatedContentByType(pageType: string, loadPrevious?: boolean, pagination?: Pagination, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchResponseContentListViewModel>> {
             const localVarAxiosArgs = await localVarAxiosParamCreator.fetchPaginatedContentByType(pageType, loadPrevious, pagination, options);
             return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
         },
         /**
          * 
          * @param {string} pageType 
          * @param {string} [term] 
          * @param {number} [page] 
          * @param {number} [pageSize] 
          * @param {boolean} [loadPrevious] 
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
         async searchByType(pageType: string, term?: string, page?: number, pageSize?: number, loadPrevious?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchResponseContentListViewModel>> {
             const localVarAxiosArgs = await localVarAxiosParamCreator.searchByType(pageType, term, page, pageSize, loadPrevious, options);
             return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
         },
     }
 };
 
 /**
  * ContentSearchApi - factory interface
  * @export
  */
 export const ContentSearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
     const localVarFp = ContentSearchApiFp(configuration)
     return {
         /**
          * 
          * @param {string} pageType 
          * @param {boolean} [loadPrevious] 
          * @param {Pagination} [pagination] 
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
         fetchPaginatedContentByType(pageType: string, loadPrevious?: boolean, pagination?: Pagination, options?: any): AxiosPromise<SearchResponseContentListViewModel> {
             return localVarFp.fetchPaginatedContentByType(pageType, loadPrevious, pagination, options).then((request) => request(axios, basePath));
         },
         /**
          * 
          * @param {string} pageType 
          * @param {string} [term] 
          * @param {number} [page] 
          * @param {number} [pageSize] 
          * @param {boolean} [loadPrevious] 
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
         searchByType(pageType: string, term?: string, page?: number, pageSize?: number, loadPrevious?: boolean, options?: any): AxiosPromise<SearchResponseContentListViewModel> {
             return localVarFp.searchByType(pageType, term, page, pageSize, loadPrevious, options).then((request) => request(axios, basePath));
         },
     };
 };
 
 /**
  * ContentSearchApi - interface
  * @export
  * @interface ContentSearchApi
  */
 export interface ContentSearchApiInterface {
     /**
      * 
      * @param {string} pageType 
      * @param {boolean} [loadPrevious] 
      * @param {Pagination} [pagination] 
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof ContentSearchApiInterface
      */
     fetchPaginatedContentByType(pageType: string, loadPrevious?: boolean, pagination?: Pagination, options?: any): AxiosPromise<SearchResponseContentListViewModel>;
 
     /**
      * 
      * @param {string} pageType 
      * @param {string} [term] 
      * @param {number} [page] 
      * @param {number} [pageSize] 
      * @param {boolean} [loadPrevious] 
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof ContentSearchApiInterface
      */
     searchByType(pageType: string, term?: string, page?: number, pageSize?: number, loadPrevious?: boolean, options?: any): AxiosPromise<SearchResponseContentListViewModel>;
 
 }
 
 /**
  * ContentSearchApi - object-oriented interface
  * @export
  * @class ContentSearchApi
  * @extends {BaseAPI}
  */
 export class ContentSearchApi extends BaseAPI implements ContentSearchApiInterface {
     /**
      * 
      * @param {string} pageType 
      * @param {boolean} [loadPrevious] 
      * @param {Pagination} [pagination] 
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof ContentSearchApi
      */
     public fetchPaginatedContentByType(pageType: string, loadPrevious?: boolean, pagination?: Pagination, options?: any) {
         return ContentSearchApiFp(this.configuration).fetchPaginatedContentByType(pageType, loadPrevious, pagination, options).then((request) => request(this.axios, this.basePath));
     }
 
     /**
      * 
      * @param {string} pageType 
      * @param {string} [term] 
      * @param {number} [page] 
      * @param {number} [pageSize] 
      * @param {boolean} [loadPrevious] 
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof ContentSearchApi
      */
     public searchByType(pageType: string, term?: string, page?: number, pageSize?: number, loadPrevious?: boolean, options?: any) {
         return ContentSearchApiFp(this.configuration).searchByType(pageType, term, page, pageSize, loadPrevious, options).then((request) => request(this.axios, this.basePath));
     }
 }
 
 
 /**
  * ProductSearchApi - axios parameter creator
  * @export
  */
 export const ProductSearchApiAxiosParamCreator = function (configuration?: Configuration) {
     return {
         /**
          * 
          * @param {string} [categoryId] 
          * @param {number} [page] 
          * @param {number} [pageSize] 
          * @param {boolean} [loadPrevious] 
          * @param {string} [categoryType] 
          * @param {*} [options] Override http request option.
          * @deprecated
          * @throws {RequiredError}
          */
         getByCategoryId: async (categoryId?: string, page?: number, pageSize?: number, loadPrevious?: boolean, categoryType?: string, options: any = {}): Promise<RequestArgs> => {
             const localVarPath = `/b2c/products/GetByCategoryId`;
             // use dummy base URL string because the URL constructor only accepts absolute URLs.
             const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
             let baseOptions;
             if (configuration) {
                 baseOptions = configuration.baseOptions;
             }
 
             const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
             const localVarHeaderParameter = {} as any;
             const localVarQueryParameter = {} as any;
 
             if (categoryId !== undefined) {
                 localVarQueryParameter['categoryId'] = categoryId;
             }
 
             if (page !== undefined) {
                 localVarQueryParameter['page'] = page;
             }
 
             if (pageSize !== undefined) {
                 localVarQueryParameter['pageSize'] = pageSize;
             }
 
             if (loadPrevious !== undefined) {
                 localVarQueryParameter['loadPrevious'] = loadPrevious;
             }
 
             if (categoryType !== undefined) {
                 localVarQueryParameter['categoryType'] = categoryType;
             }
 
 
     
             setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
             let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
             localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
 
             return {
                 url: toPathString(localVarUrlObj),
                 options: localVarRequestOptions,
             };
         },
         /**
          * 
          * @param {boolean} [isIndoor] 
          * @param {string} [basesCsv] 
          * @param {string} [roomFeatures] 
          * @param {string} [substrateFeatures] 
          * @param {string} [glossFeatures] 
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
         getByColorWizard: async (isIndoor?: boolean, basesCsv?: string, roomFeatures?: string, substrateFeatures?: string, glossFeatures?: string, options: any = {}): Promise<RequestArgs> => {
             const localVarPath = `/b2c/products/GetByColorWizard`;
             // use dummy base URL string because the URL constructor only accepts absolute URLs.
             const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
             let baseOptions;
             if (configuration) {
                 baseOptions = configuration.baseOptions;
             }
 
             const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
             const localVarHeaderParameter = {} as any;
             const localVarQueryParameter = {} as any;
 
             if (isIndoor !== undefined) {
                 localVarQueryParameter['isIndoor'] = isIndoor;
             }
 
             if (basesCsv !== undefined) {
                 localVarQueryParameter['basesCsv'] = basesCsv;
             }
 
             if (roomFeatures !== undefined) {
                 localVarQueryParameter['roomFeatures'] = roomFeatures;
             }
 
             if (substrateFeatures !== undefined) {
                 localVarQueryParameter['substrateFeatures'] = substrateFeatures;
             }
 
             if (glossFeatures !== undefined) {
                 localVarQueryParameter['glossFeatures'] = glossFeatures;
             }
 
 
     
             setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
             let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
             localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
 
             return {
                 url: toPathString(localVarUrlObj),
                 options: localVarRequestOptions,
             };
         },
         /**
          * 
          * @param {string} [categoryId] 
          * @param {number} [page] 
          * @param {number} [pageSize] 
          * @param {boolean} [loadPrevious] 
          * @param {SearchSelectedFilters} [searchSelectedFilters] 
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
         getByFiltersAndCategoryId: async (categoryId?: string, page?: number, pageSize?: number, loadPrevious?: boolean, searchSelectedFilters?: SearchSelectedFilters, options: any = {}): Promise<RequestArgs> => {
             const localVarPath = `/b2c/products/GetByFiltersAndCategoryId`;
             // use dummy base URL string because the URL constructor only accepts absolute URLs.
             const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
             let baseOptions;
             if (configuration) {
                 baseOptions = configuration.baseOptions;
             }
 
             const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
             const localVarHeaderParameter = {} as any;
             const localVarQueryParameter = {} as any;
 
             if (categoryId !== undefined) {
                 localVarQueryParameter['categoryId'] = categoryId;
             }
 
             if (page !== undefined) {
                 localVarQueryParameter['page'] = page;
             }
 
             if (pageSize !== undefined) {
                 localVarQueryParameter['pageSize'] = pageSize;
             }
 
             if (loadPrevious !== undefined) {
                 localVarQueryParameter['loadPrevious'] = loadPrevious;
             }
 
 
     
             localVarHeaderParameter['Content-Type'] = 'application/json';
 
             setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
             let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
             localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
             localVarRequestOptions.data = serializeDataIfNeeded(searchSelectedFilters, localVarRequestOptions, configuration)
 
             return {
                 url: toPathString(localVarUrlObj),
                 options: localVarRequestOptions,
             };
         },
     }
 };
 
 /**
  * ProductSearchApi - functional programming interface
  * @export
  */
 export const ProductSearchApiFp = function(configuration?: Configuration) {
     const localVarAxiosParamCreator = ProductSearchApiAxiosParamCreator(configuration)
     return {
         /**
          * 
          * @param {string} [categoryId] 
          * @param {number} [page] 
          * @param {number} [pageSize] 
          * @param {boolean} [loadPrevious] 
          * @param {string} [categoryType] 
          * @param {*} [options] Override http request option.
          * @deprecated
          * @throws {RequiredError}
          */
         async getByCategoryId(categoryId?: string, page?: number, pageSize?: number, loadPrevious?: boolean, categoryType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchFiltersResponseProductListViewModel>> {
             const localVarAxiosArgs = await localVarAxiosParamCreator.getByCategoryId(categoryId, page, pageSize, loadPrevious, categoryType, options);
             return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
         },
         /**
          * 
          * @param {boolean} [isIndoor] 
          * @param {string} [basesCsv] 
          * @param {string} [roomFeatures] 
          * @param {string} [substrateFeatures] 
          * @param {string} [glossFeatures] 
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
         async getByColorWizard(isIndoor?: boolean, basesCsv?: string, roomFeatures?: string, substrateFeatures?: string, glossFeatures?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchColorWizardViewModel>> {
             const localVarAxiosArgs = await localVarAxiosParamCreator.getByColorWizard(isIndoor, basesCsv, roomFeatures, substrateFeatures, glossFeatures, options);
             return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
         },
         /**
          * 
          * @param {string} [categoryId] 
          * @param {number} [page] 
          * @param {number} [pageSize] 
          * @param {boolean} [loadPrevious] 
          * @param {SearchSelectedFilters} [searchSelectedFilters] 
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
         async getByFiltersAndCategoryId(categoryId?: string, page?: number, pageSize?: number, loadPrevious?: boolean, searchSelectedFilters?: SearchSelectedFilters, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchFiltersResponseProductListViewModel>> {
             const localVarAxiosArgs = await localVarAxiosParamCreator.getByFiltersAndCategoryId(categoryId, page, pageSize, loadPrevious, searchSelectedFilters, options);
             return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
         },
     }
 };
 
 /**
  * ProductSearchApi - factory interface
  * @export
  */
 export const ProductSearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
     const localVarFp = ProductSearchApiFp(configuration)
     return {
         /**
          * 
          * @param {string} [categoryId] 
          * @param {number} [page] 
          * @param {number} [pageSize] 
          * @param {boolean} [loadPrevious] 
          * @param {string} [categoryType] 
          * @param {*} [options] Override http request option.
          * @deprecated
          * @throws {RequiredError}
          */
         getByCategoryId(categoryId?: string, page?: number, pageSize?: number, loadPrevious?: boolean, categoryType?: string, options?: any): AxiosPromise<SearchFiltersResponseProductListViewModel> {
             return localVarFp.getByCategoryId(categoryId, page, pageSize, loadPrevious, categoryType, options).then((request) => request(axios, basePath));
         },
         /**
          * 
          * @param {boolean} [isIndoor] 
          * @param {string} [basesCsv] 
          * @param {string} [roomFeatures] 
          * @param {string} [substrateFeatures] 
          * @param {string} [glossFeatures] 
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
         getByColorWizard(isIndoor?: boolean, basesCsv?: string, roomFeatures?: string, substrateFeatures?: string, glossFeatures?: string, options?: any): AxiosPromise<SearchColorWizardViewModel> {
             return localVarFp.getByColorWizard(isIndoor, basesCsv, roomFeatures, substrateFeatures, glossFeatures, options).then((request) => request(axios, basePath));
         },
         /**
          * 
          * @param {string} [categoryId] 
          * @param {number} [page] 
          * @param {number} [pageSize] 
          * @param {boolean} [loadPrevious] 
          * @param {SearchSelectedFilters} [searchSelectedFilters] 
          * @param {*} [options] Override http request option.
          * @throws {RequiredError}
          */
         getByFiltersAndCategoryId(categoryId?: string, page?: number, pageSize?: number, loadPrevious?: boolean, searchSelectedFilters?: SearchSelectedFilters, options?: any): AxiosPromise<SearchFiltersResponseProductListViewModel> {
             return localVarFp.getByFiltersAndCategoryId(categoryId, page, pageSize, loadPrevious, searchSelectedFilters, options).then((request) => request(axios, basePath));
         },
     };
 };
 
 /**
  * ProductSearchApi - interface
  * @export
  * @interface ProductSearchApi
  */
 export interface ProductSearchApiInterface {
     /**
      * 
      * @param {string} [categoryId] 
      * @param {number} [page] 
      * @param {number} [pageSize] 
      * @param {boolean} [loadPrevious] 
      * @param {string} [categoryType] 
      * @param {*} [options] Override http request option.
      * @deprecated
      * @throws {RequiredError}
      * @memberof ProductSearchApiInterface
      */
     getByCategoryId(categoryId?: string, page?: number, pageSize?: number, loadPrevious?: boolean, categoryType?: string, options?: any): AxiosPromise<SearchFiltersResponseProductListViewModel>;
 
     /**
      * 
      * @param {boolean} [isIndoor] 
      * @param {string} [basesCsv] 
      * @param {string} [roomFeatures] 
      * @param {string} [substrateFeatures] 
      * @param {string} [glossFeatures] 
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof ProductSearchApiInterface
      */
     getByColorWizard(isIndoor?: boolean, basesCsv?: string, roomFeatures?: string, substrateFeatures?: string, glossFeatures?: string, options?: any): AxiosPromise<SearchColorWizardViewModel>;
 
     /**
      * 
      * @param {string} [categoryId] 
      * @param {number} [page] 
      * @param {number} [pageSize] 
      * @param {boolean} [loadPrevious] 
      * @param {SearchSelectedFilters} [searchSelectedFilters] 
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof ProductSearchApiInterface
      */
     getByFiltersAndCategoryId(categoryId?: string, page?: number, pageSize?: number, loadPrevious?: boolean, searchSelectedFilters?: SearchSelectedFilters, options?: any): AxiosPromise<SearchFiltersResponseProductListViewModel>;
 
 }
 
 /**
  * ProductSearchApi - object-oriented interface
  * @export
  * @class ProductSearchApi
  * @extends {BaseAPI}
  */
 export class ProductSearchApi extends BaseAPI implements ProductSearchApiInterface {
     /**
      * 
      * @param {string} [categoryId] 
      * @param {number} [page] 
      * @param {number} [pageSize] 
      * @param {boolean} [loadPrevious] 
      * @param {string} [categoryType] 
      * @param {*} [options] Override http request option.
      * @deprecated
      * @throws {RequiredError}
      * @memberof ProductSearchApi
      */
     public getByCategoryId(categoryId?: string, page?: number, pageSize?: number, loadPrevious?: boolean, categoryType?: string, options?: any) {
         return ProductSearchApiFp(this.configuration).getByCategoryId(categoryId, page, pageSize, loadPrevious, categoryType, options).then((request) => request(this.axios, this.basePath));
     }
 
     /**
      * 
      * @param {boolean} [isIndoor] 
      * @param {string} [basesCsv] 
      * @param {string} [roomFeatures] 
      * @param {string} [substrateFeatures] 
      * @param {string} [glossFeatures] 
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof ProductSearchApi
      */
     public getByColorWizard(isIndoor?: boolean, basesCsv?: string, roomFeatures?: string, substrateFeatures?: string, glossFeatures?: string, options?: any) {
         return ProductSearchApiFp(this.configuration).getByColorWizard(isIndoor, basesCsv, roomFeatures, substrateFeatures, glossFeatures, options).then((request) => request(this.axios, this.basePath));
     }
 
     /**
      * 
      * @param {string} [categoryId] 
      * @param {number} [page] 
      * @param {number} [pageSize] 
      * @param {boolean} [loadPrevious] 
      * @param {SearchSelectedFilters} [searchSelectedFilters] 
      * @param {*} [options] Override http request option.
      * @throws {RequiredError}
      * @memberof ProductSearchApi
      */
     public getByFiltersAndCategoryId(categoryId?: string, page?: number, pageSize?: number, loadPrevious?: boolean, searchSelectedFilters?: SearchSelectedFilters, options?: any) {
         return ProductSearchApiFp(this.configuration).getByFiltersAndCategoryId(categoryId, page, pageSize, loadPrevious, searchSelectedFilters, options).then((request) => request(this.axios, this.basePath));
     }
 }
 
 
 